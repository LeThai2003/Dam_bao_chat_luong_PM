const { Builder, By, until, Key } = require('selenium-webdriver');
const path = require('path');
const assert = require('assert');
require('chromedriver');

const URL = 'http://localhost:3000';
const EMAIL = 'leducthai1008@gmail.com';
const PASSWORD = '123';

let driver;

async function login() {
  await driver.get(`${URL}/admin/auth/login`);
  await driver.findElement(By.name('email')).sendKeys(EMAIL);
  await driver.findElement(By.name('password')).sendKeys(PASSWORD);
  await driver.findElement(By.css('button[type=submit]')).click();
  await driver.wait(until.urlContains('/admin/dashboard'), 5000);
  console.log('‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng');
}

async function goToProductPage() {
  try {
    // Click v√†o menu s·∫£n ph·∫©m
    await driver.findElement(By.css('a[href="/admin/products"]')).click();

    // ƒê·ª£i URL chuy·ªÉn sang ƒë√∫ng trang
    await driver.wait(until.urlContains('/admin/products'), 5000);

    // Sau khi chuy·ªÉn trang xong ‚Üí ki·ªÉm tra c√≥ b·∫£ng ch·ª©a checkbox-multi kh√¥ng
    await driver.wait(
      until.elementLocated(By.css('table[checkbox-multi]')),
      5000
    );

    console.log('‚úÖ ƒê√£ v√†o trang qu·∫£n l√Ω s·∫£n ph·∫©m v√† b·∫£ng hi·ªÉn th·ªã ƒë√∫ng');
  } catch (err) {
    if (err.name === 'TimeoutError') {
      const currentUrl = await driver.getCurrentUrl();
      if (!currentUrl.includes('/admin/products')) {
        console.error('‚ùå L·ªói: Kh√¥ng th·ªÉ chuy·ªÉn ƒë·∫øn trang qu·∫£n l√Ω s·∫£n ph·∫©m trong 5s');
      } else {
        console.error('‚ùå L·ªói: Trang qu·∫£n l√Ω s·∫£n ph·∫©m kh√¥ng hi·ªÉn th·ªã b·∫£ng d·ªØ li·ªáu (table[checkbox-multi])');
      }
    } else {
      console.error('‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh:', err.message);
    }
  }
}

// -----------------------------
// Ki·ªÉm tra ph√¢n trang: ƒë·∫øm s·ªë h√†ng s·∫£n ph·∫©m, chuy·ªÉn trang n·∫øu c√≥
// -----------------------------
async function testPagination() {
  const getProductTitles = async () => {
    const elements = await driver.findElements(By.css('table tbody tr td:nth-child(4)'));
    const titles = [];

    for (let el of elements) {
      titles.push(await el.getText());
    }

    return titles;
  };

  const titlesPage1 = await getProductTitles();

  // T√¨m n√∫t ph√¢n trang "K·∫ø ti·∫øp" (t·ª©c l√† trang 2)
  const nextPageButtons = await driver.findElements(By.css('button.page-link[button-pagination="2"]'));

  // Tr∆∞·ªùng h·ª£p ch·ªâ c√≥ 1 trang
  if (!nextPageButtons.length > 0) {
    console.log('‚úÖ Ch·ªâ c√≥ 1 trang ‚Üí Ph√¢n trang ƒë√∫ng');
    return;
  }

  // C√≥ trang 2 ‚Üí th·ª≠ click
  try {
    await nextPageButtons[0].click();
    await driver.sleep(1000); // ch·ªù d·ªØ li·ªáu t·∫£i

    const titlesPage2 = await getProductTitles();

    // Ki·ªÉm tra n·ªôi dung
    if (titlesPage2.length === 0) {
      console.log('‚ùå Trang 2 kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ‚Üí Ph√¢n trang l·ªói');
    } else if (JSON.stringify(titlesPage1) === JSON.stringify(titlesPage2)) {
      console.log('‚ùå Trang 2 gi·ªëng h·ªát trang 1 ‚Üí C√≥ th·ªÉ ph√¢n trang b·ªã l·ªói');
    } else {
      console.log('‚úÖ Ph√¢n trang ho·∫°t ƒë·ªông ƒë√∫ng, n·ªôi dung trang 2 kh√°c trang 1');
    }
  } catch (err) {
    console.error('‚ùå Kh√¥ng th·ªÉ click sang trang 2:', err.message);
  }
}

async function searchProduct() {
  const keyword = 'N·ªØ'; // ho·∫∑c th·ª≠ 'xxxxx' ƒë·ªÉ test kh√¥ng c√≥ k·∫øt qu·∫£

  const searchInput = await driver.findElement(By.name('keyword'));
  await searchInput.clear();
  await searchInput.sendKeys(keyword, Key.RETURN);
  await driver.sleep(1000);

  const searchResults = await driver.findElements(By.css('table tbody tr'));
  const resultCount = searchResults.length;
  console.log(`üîé Sau t√¨m ki·∫øm "${keyword}": ${resultCount} s·∫£n ph·∫©m`);

  if (resultCount === 0) {
    // ‚úÖ Ki·ªÉm tra c√≥ th√¥ng b√°o "Kh√¥ng t√¨m th·∫•y..." hay kh√¥ng (n·∫øu c√≥)
    try {
      const noResultMessage = await driver.findElement(By.css('.no-results'));
      const messageText = await noResultMessage.getText();
      console.log(`‚úÖ Th√¥ng b√°o h·ªá th·ªëng: "${messageText}"`);
    } catch (e) {
      console.warn('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y th√¥ng b√°o khi kh√¥ng c√≥ k·∫øt qu·∫£!');
    }
  } else {

    for (let i = 0; i < resultCount; i++) {
      const titleCell = await searchResults[i].findElement(By.css('td:nth-child(4)'));
      const titleText = await titleCell.getText();

      if (!titleText.toLowerCase().includes(keyword.toLowerCase())) {
        console.warn(`‚ùå SAI: H√†ng ${i + 1}: title kh√¥ng ch·ª©a "${keyword}": "${titleText}"`);
      } else {
        console.log(`‚úÖ H√†ng ${i + 1} h·ª£p l·ªá: "${titleText}"`);
      }
    }
  }
}

async function sortPriceAsc() {
  console.log('-------Test s·∫Øp x·∫øp theo gi√° tƒÉng d·∫ßn...');

  const sortSelect = await driver.findElement(By.name('sort'));
  await sortSelect.click(); // m·ªü dropdown

  // T√¨m option c√≥ value="price-asc"
  const priceAscOption = await sortSelect.findElement(By.css('option[value="price-asc"]'));
  await priceAscOption.click();

  await driver.sleep(1000);

  // L·∫•y c√°c d√≤ng s·∫£n ph·∫©m
  const searchResults = await driver.findElements(By.css('table tbody tr'));
  const prices = [];

  for (let i = 0; i < searchResults.length; i++) {
    const priceCell = await searchResults[i].findElement(By.css('td:nth-child(5)'));
    let priceText = await priceCell.getText(); // V√≠ d·ª•: "12.000.000ƒë"
    
    // L√†m s·∫°ch v√† chuy·ªÉn th√†nh s·ªë: b·ªè d·∫•u ch·∫•m, k√Ω t·ª± ƒë
    let price = parseInt(priceText.replace(/[^\d]/g, ''), 10);
    prices.push(price);
  }

  console.log('Danh s√°ch gi√° s·∫£n ph·∫©m:', prices);

  // Ki·ªÉm tra xem m·∫£ng c√≥ s·∫Øp x·∫øp tƒÉng d·∫ßn kh√¥ng
  const isSorted = prices.every((val, i, arr) => i === 0 || arr[i - 1] <= val);
  if (isSorted) {
    console.log('‚úÖ Gi√° ƒë√£ ƒë∆∞·ª£c s·∫Øp x·∫øp tƒÉng d·∫ßn h·ª£p l·ªá.');
  } else {
    console.warn('‚ùå Gi√° KH√îNG ƒë∆∞·ª£c s·∫Øp x·∫øp tƒÉng d·∫ßn!');
  }
}

async function changeStatus() {
  // L·∫•y danh s√°ch c√°c √¥ tr·∫°ng th√°i trong c·ªôt 7
  const statusCells = await driver.findElements(By.css('table tbody tr td:nth-child(7)'));

  if (statusCells.length === 0) {
    console.error("‚ùå Kh√¥ng t√¨m th·∫•y √¥ tr·∫°ng th√°i trong b·∫£ng!");
    return;
  }

  const statusCell = statusCells[0];

  // L·∫•y th·∫ª <a> b√™n trong √¥ tr·∫°ng th√°i
  const statusLink = await statusCell.findElement(By.css('a'));
  const textBefore = await statusLink.getText();
  console.log(`üîÑ Tr·∫°ng th√°i ban ƒë·∫ßu: ${textBefore}`);

  // Click ƒë·ªÉ thay ƒë·ªïi tr·∫°ng th√°i
  await statusLink.click();
  await driver.sleep(1000); // ƒë·ª£i backend x·ª≠ l√Ω & giao di·ªán c·∫≠p nh·∫≠t

  // L·∫•y l·∫°i th·∫ª <a> sau khi reload l·∫°i DOM (kh√¥ng d√πng bi·∫øn c≈© n·ªØa)
  const statusCellsAfter = await driver.findElements(By.css('table tbody tr td:nth-child(7)'));
  const statusLinkAfter = await statusCellsAfter[0].findElement(By.css('a'));
  const textAfter = await statusLinkAfter.getText();
  console.log(`üîÅ Tr·∫°ng th√°i sau khi click: ${textAfter}`);

  if (textAfter !== textBefore) {
    console.log("‚úÖ Tr·∫°ng th√°i ƒë√£ thay ƒë·ªïi th√†nh c√¥ng");
  } else {
    console.log("‚ùå Tr·∫°ng th√°i KH√îNG thay ƒë·ªïi");
  }
}

async function testInvalidProductSubmission() {
  await driver.findElement(By.css('a[href="/admin/products/create"]')).click();
  await driver.wait(until.urlContains('/admin/products/create'), 5000);

  // G·ª° thu·ªôc t√≠nh required v√† min c·ªßa input b·∫±ng JavaScript
  await driver.executeScript(`
    document.getElementById('title').removeAttribute('required');
    document.getElementById('price').removeAttribute('min');
    document.getElementById('stock').removeAttribute('min');
    document.getElementById('discount').removeAttribute('min');
  `);

  await driver.findElement(By.name('title')).sendKeys('abc'); // qu√° ng·∫Øn
  await driver.findElement(By.name('price')).sendKeys('-1000'); // sai
  await driver.findElement(By.name('stock')).sendKeys('-5'); // sai
  await driver.findElement(By.name('discountPercentage')).sendKeys('200'); // sai

  await driver.findElement(By.css('button[type=submit]')).click();

  const errorBox = await driver.wait(until.elementLocated(By.css('.alert-danger')), 3000);
  const errorText = await errorBox.getText();

  console.log("L·ªói ph·∫£n h·ªìi t·ª´ server:", errorText);
  if (
    errorText.includes("Ti√™u ƒë·ªÅ") ||
    errorText.includes("Gi√°") ||
    errorText.includes("S·ªë l∆∞·ª£ng") ||
    errorText.includes("% Gi·∫£m gi√°")
  ) {
    console.log("‚úÖ Ki·ªÉm th·ª≠ validate server th√†nh c√¥ng");
  } else {
    console.error("‚ùå L·ªói server validate kh√¥ng ƒë∆∞·ª£c hi·ªÉn th·ªã ƒë√∫ng");
  }
}


async function testAddProductSuccess() {
  await driver.findElement(By.css('a[href="/admin/products/create"]')).click();
  await driver.wait(until.urlContains('/admin/products/create'), 5000);

  await driver.findElement(By.name('title')).sendKeys('S·∫£n ph·∫©m m·ªõi Selenium');
  await driver.findElement(By.name('price')).sendKeys('100000');
  // await driver.findElement(By.name('description')).sendKeys('M√¥ t·∫£ s·∫£n ph·∫©m Selenium');
  await driver.findElement(By.name('discountPercentage')).sendKeys('5');
  await driver.findElement(By.name('stock')).sendKeys('10');

  // Ch·ªçn danh m·ª•c n·∫øu c√≥
  const options = await driver.findElements(By.css('select[name="product_category_id"] option'));
  if (options.length > 1) {
    await options[1].click(); // (kh√°c "-- Ch·ªçn danh m·ª•c --")
  }

  // Upload file (ƒë·∫£m b·∫£o b·∫°n c√≥ ·∫£nh test.jpeg trong c√πng th∆∞ m·ª•c)
  const fileInput = await driver.findElement(By.name('thumbnail'));
  await fileInput.sendKeys(path.resolve(__dirname, 'test.jpeg'));

  await driver.findElement(By.css('button[type=submit]')).click();

  // Ch·ªù v·ªÅ l·∫°i trang danh s√°ch
  await driver.wait(until.urlIs(`${URL}/admin/products`), 5000);
  

  // X√°c minh s·∫£n ph·∫©m n·∫±m ƒë·∫ßu b·∫£ng
  const firstTitle = await driver.findElement(By.css('table tbody tr:first-child td:nth-child(4)')).getText();
  assert(firstTitle.includes('S·∫£n ph·∫©m m·ªõi Selenium'), "‚ùå Kh√¥ng th·∫•y s·∫£n ph·∫©m v·ª´a th√™m ·ªü ƒë·∫ßu danh s√°ch");
  console.log("‚úÖ Th√™m s·∫£n ph·∫©m th√†nh c√¥ng");
}

async function editProductSuccess() {
  // Gi·∫£ s·ª≠ c√≥ n√∫t "S·ª≠a" l√† m·ªôt icon ho·∫∑c button v·ªõi class c·ª• th·ªÉ
  await driver.findElement(By.xpath("//table/tbody/tr[1]//a[normalize-space(text())='S·ª≠a']")).click();
  await driver.wait(until.urlContains('/admin/products/edit'), 5000);

  const titleInput = await driver.findElement(By.name('title'));
  await titleInput.clear();
  await titleInput.sendKeys('S·∫£n ph·∫©m ƒë√£ ch·ªânh s·ª≠a');

  await driver.findElement(By.css('button[type=submit]')).click();
  
  const successAlert = await driver.wait(until.elementLocated(By.css('.alert-success')), 1000);
  const successText = await successAlert.getText();
  const titleInputAfter = await driver.findElement(By.name('title'));

  const titleInputValue = await titleInputAfter.getAttribute('value');

  if(successText.includes("th√†nh c√¥ng") && titleInputValue == "S·∫£n ph·∫©m ƒë√£ ch·ªânh s·ª≠a")
    console.log('‚úÖ Ch·ªânh s·ª≠a s·∫£n ph·∫©m th√†nh c√¥ng');
  else
    console.log('‚ùå Ch·ªânh s·ª≠a s·∫£n ph·∫©m kh√¥ng th√†nh c√¥ng');
}

async function deleteProduct() {
  await driver.get(`${URL}/admin/products`);
  // T√¨m n√∫t ƒë·∫ßu ti√™n c√≥ text "X√≥a" ho·∫∑c c√≥ attribute button-delete
  const deleteButton = await driver.findElement(By.css('button[button-delete]'));
  await deleteButton.click();

  // X·ª≠ l√Ω confirm popup (ch·ªçn "OK")
  try {
    const alert = await driver.switchTo().alert();
    await alert.accept(); // ƒë·ªìng √Ω x√≥a
    console.log('‚úÖ ƒê√£ x√°c nh·∫≠n x√≥a');
  } catch (error) {
    console.log('‚ùå Kh√¥ng c√≥ popup confirm', error);
  }

  await driver.sleep(3000);

  // Ki·ªÉm tra s·∫£n ph·∫©m kh√¥ng c√≤n trong b·∫£ng
  const titles = await driver.findElements(By.css('td:nth-child(4)'));
  for (const td of titles) {
    const text = await td.getText();
    if (text.includes("S·∫£n ph·∫©m ƒë√£ ch·ªânh s·ª≠a")) {
      console.log('‚ùå X√≥a s·∫£n ph·∫©m kh√¥ng th√†nh c√¥ng');
      return;
    }
  }
  console.log('‚úÖ X√≥a s·∫£n ph·∫©m th√†nh c√¥ng');
}


async function changePositonProduct() {
  try {
    // checkbox s·∫£n ph·∫©m ƒë·∫ßu ti√™n
    const checkboxCells = await driver.findElements(By.css('table tbody tr td:nth-child(1)'));
    await checkboxCells[0].click();
    
    // l·∫•y gi√° tr·ªã v·ªã tr√≠ ƒë·∫ßu
    const inputPositionCells = await driver.findElements(By.css('table tbody tr td:nth-child(6) input'));
    const inputPostionFirst = inputPositionCells[0];

    // in ra v·ªã tr√≠ ƒë·∫ßu
    const inputPostionFirstText = await inputPostionFirst.getAttribute("value");
    console.log("V·ªã tr√≠ ban ƒë·∫ßu: ", inputPostionFirstText);

    // c·∫≠p nh·∫≠t v·ªã tr√≠
    const vitri = "5";

    await inputPostionFirst.clear();
    await inputPostionFirst.sendKeys(vitri);

    // ch·ªçn option c·∫≠p nh·∫≠t v·ªã tr√≠
    const typeSelect = await driver.findElement(By.css('select[name="type"]'));
    await typeSelect.click();

    // T√¨m option 
    const changePositionOption = await typeSelect.findElement(By.css('option[value="change-position"]'));
    await changePositionOption.click();

    await driver.findElement(By.xpath("//button[contains(text(),'√Åp d·ª•ng')]")).click();

    // l·∫•y l·∫°i gi√° tr·ªã v·ªã tr√≠ sau khi thay ƒë·ªïi c·ªßa s·∫£n ph·∫©m ƒë·∫ßu ti√™n 
    const inputPositionCellsAfter = await driver.findElements(By.css('table tbody tr td:nth-child(6) input'));
    const inputPostionAfter = inputPositionCellsAfter[0];

    // in ra v·ªã tr√≠ sau v√† so s√°nh v·ªõi vitri
    const inputPostionAfterText = await inputPostionAfter.getAttribute("value");
    console.log("V·ªã tr√≠ sau thay ƒë·ªïi: ", inputPostionAfterText);

    if(inputPostionAfterText == vitri) console.log("‚úÖ C·∫≠p nh·∫≠t v·ªã tr√≠ th√†nh c√¥ng")
    else console.log("‚ùå C·∫≠p nh·∫≠t v·ªã tr√≠ kh√¥ng th√†nh c√¥ng")
  } catch (error) {
    console.log("‚ùå L·ªói thay ƒë·ªïi v·ªã tr√≠: ", error);
  }
}

async function testFilterStatus() {
  // T√¨m Button Status: Ho·∫°t ƒë·ªông - D·ª´ng ho·∫°t ƒë·ªông
  const buttonActive = await driver.findElement(By.css('button[button-status="active"]'));
  // Click button Ho·∫°t ƒë·ªông, T√¨m ul pagination: L·∫•y li(1) v√† li(2), sau ƒë√≥ l·∫•y gi√° tr·ªã thu·ªôc t√≠nh button-pagination
  await buttonActive.click();

  const paginationActive = await driver.findElement(By.css('ul.pagination'));
  const buttonPaginationActiveFirst = await paginationActive.findElement(By.css('li:nth-child(1) button'));
  const pageActiveFirst = await buttonPaginationActiveFirst.getAttribute("button-pagination");

  const buttonPaginationActiveLast = await paginationActive.findElement(By.css('li:last-child button'));
  const pageActiveLast = await buttonPaginationActiveLast.getAttribute("button-pagination");

  console.log("Ho·∫°t ƒë·ªông: ", pageActiveFirst, "-", pageActiveLast)
  // For loop t·ª´ trang ƒë·∫ßu t·ªõi cu·ªëi, m·ªói trang s·∫Ω l·∫•y danh s√°ch s·∫£n ph·∫©m --> l·∫•y gi√° tr·ªã ho·∫°t ƒë·ªông: Ho·∫°t ƒë·ªông m√† c√≥ "d·ª´ng ho·∫°t ƒë·ªông" --> L·ªói
  for(let i = Number(pageActiveFirst); i <= Number(pageActiveLast); i++){
    // Ph·∫£i t√¨m l·∫°i pagination m·ªói v√≤ng v√¨ DOM thay ƒë·ªïi sau m·ªói click
    const paginationActive = await driver.findElement(By.css('ul.pagination'));

    const buttonPage = await paginationActive.findElement(By.css(`li button[button-pagination="${i}"]`));
    await buttonPage.click();
    
    const searchResults = await driver.findElements(By.css('table tbody tr'));

    for (let i = 0; i < searchResults.length; i++) {
      const statusLink = await searchResults[i].findElement(By.css('td:nth-child(7) a'));
      const statusText = await statusLink.getText();
      if(statusText !== "Ho·∫°t ƒë·ªông"){
        console.log("‚ùå L·ªçc tr·∫°ng th√°i 'ho·∫°t ƒë·ªông' sai");
        return;
      }
    }
  }

  console.log("‚úÖ L·ªçc tr·∫°ng th√°i 'ho·∫°t ƒë·ªông' th√†nh c√¥ng");

  const pagination = await driver.findElement(By.css('ul.pagination'));
  await pagination.findElement(By.css(`li button[button-pagination="1"]`)).click();

  // ---------------------------------------------
  // T√¨m Button Status: Ho·∫°t ƒë·ªông - D·ª´ng ho·∫°t ƒë·ªông
  const buttonInactive = await driver.findElement(By.css('button[button-status="inactive"]'));
  // Click button Ho·∫°t ƒë·ªông, T√¨m ul pagination: L·∫•y li(1) v√† li(2), sau ƒë√≥ l·∫•y gi√° tr·ªã thu·ªôc t√≠nh button-pagination
  await buttonInactive.click();

  const paginationInactive = await driver.findElement(By.css('ul.pagination'));
  const buttonPaginationInactiveFirst = await paginationInactive.findElement(By.css('li:nth-child(1) button'));
  const pageInactiveFirst = await buttonPaginationInactiveFirst.getAttribute("button-pagination");

  const buttonPaginationInactiveLast = await paginationInactive.findElement(By.css('li:last-child button'));
  const pageInactiveLast = await buttonPaginationInactiveLast.getAttribute("button-pagination");

  console.log("D·ª´ng ho·∫°t ƒë·ªông: ", pageInactiveFirst, "-", pageInactiveLast)

  // For loop t·ª´ trang ƒë·∫ßu t·ªõi cu·ªëi, m·ªói trang s·∫Ω l·∫•y danh s√°ch s·∫£n ph·∫©m --> l·∫•y gi√° tr·ªã ho·∫°t ƒë·ªông: Ho·∫°t ƒë·ªông m√† c√≥ "d·ª´ng ho·∫°t ƒë·ªông" --> L·ªói
  for(let i = Number(pageInactiveFirst); i <= Number(pageInactiveLast); i++){
    // Ph·∫£i t√¨m l·∫°i pagination m·ªói v√≤ng v√¨ DOM thay ƒë·ªïi sau m·ªói click
    const paginationInactive = await driver.findElement(By.css('ul.pagination'));

    const buttonPage = await paginationInactive.findElement(By.css(`li button[button-pagination="${i}"]`));
    await buttonPage.click();
    
    const searchResults = await driver.findElements(By.css('table tbody tr'));

    for (let i = 0; i < searchResults.length; i++) {
      const statusLink = await searchResults[i].findElement(By.css('td:nth-child(7) a'));
      const statusText = await statusLink.getText();
      if(statusText !== "D·ª´ng ho·∫°t ƒë·ªông"){
        console.log("‚ùå L·ªçc tr·∫°ng th√°i 'd·ª´ng ho·∫°t ƒë·ªông' sai");
        return;
      }
    }
  }

  console.log("‚úÖ L·ªçc tr·∫°ng th√°i 'd·ª´ng ho·∫°t ƒë·ªông' th√†nh c√¥ng");

  // ---------------------------------------------
   
}


async function runAllTests() {
  driver = await new Builder().forBrowser('chrome').build();
  try {
    await login();
    await goToProductPage();

    await testPagination();
    await searchProduct();
    await sortPriceAsc();
    await changeStatus();
    await testInvalidProductSubmission();
    await testAddProductSuccess();
    await editProductSuccess();
    await deleteProduct();
    await changePositonProduct();
    await testFilterStatus();


  } catch (err) {
    console.error('‚ùå C√≥ l·ªói x·∫£y ra:', err);
  } finally {
    await driver.quit();
  }
}

runAllTests();